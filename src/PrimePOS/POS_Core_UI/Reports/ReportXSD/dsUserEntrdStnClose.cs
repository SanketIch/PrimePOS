namespace POS_Core_UI.Reports.ReportXSD
{
}

namespace POS_Core_UI.Reports.ReportXSD
{
}

namespace POS.Reports.ReportXSD
{
}

namespace POS.Reports.ReportXSD
{
}

namespace POS.Reports.ReportXSD
{
}

namespace POS.Reports.ReportXSD
{
}

namespace POS.Reports.ReportXSD
{
}

namespace POS.Reports.ReportXSD
{
}
namespace POS.Reports.ReportXSD
{
}
namespace POS.Reports.ReportXSD
{
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3620
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("dsUserEntrdStnClose")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class dsUserEntrdStnClose : global::System.Data.DataSet {
    
    private UserEntrdStnCloseDataTable tableUserEntrdStnClose;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public dsUserEntrdStnClose() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected dsUserEntrdStnClose(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["UserEntrdStnClose"] != null)) {
                base.Tables.Add(new UserEntrdStnCloseDataTable(ds.Tables["UserEntrdStnClose"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public UserEntrdStnCloseDataTable UserEntrdStnClose {
        get {
            return this.tableUserEntrdStnClose;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override global::System.Data.DataSet Clone() {
        dsUserEntrdStnClose cln = ((dsUserEntrdStnClose)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["UserEntrdStnClose"] != null)) {
                base.Tables.Add(new UserEntrdStnCloseDataTable(ds.Tables["UserEntrdStnClose"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.tableUserEntrdStnClose = ((UserEntrdStnCloseDataTable)(base.Tables["UserEntrdStnClose"]));
        if ((initTable == true)) {
            if ((this.tableUserEntrdStnClose != null)) {
                this.tableUserEntrdStnClose.InitVars();
            }
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "dsUserEntrdStnClose";
        this.Prefix = "";
        this.Namespace = "http://tempuri.org/dsUserEntrdStnClose.xsd";
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableUserEntrdStnClose = new UserEntrdStnCloseDataTable();
        base.Tables.Add(this.tableUserEntrdStnClose);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeUserEntrdStnClose() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        dsUserEntrdStnClose ds = new dsUserEntrdStnClose();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    public delegate void UserEntrdStnCloseRowChangeEventHandler(object sender, UserEntrdStnCloseRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class UserEntrdStnCloseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnStationCloseId;
        
        private global::System.Data.DataColumn columnCurrencyDenomId;
        
        private global::System.Data.DataColumn columnCurrencyDescription;
        
        private global::System.Data.DataColumn columnCount;
        
        private global::System.Data.DataColumn columnTotalValue;
        
        private global::System.Data.DataColumn columnCurrencyType;
        
        private global::System.Data.DataColumn columnCloseDate;
        
        private global::System.Data.DataColumn columnDefCDStartBalance;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserEntrdStnCloseDataTable() {
            this.TableName = "UserEntrdStnClose";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal UserEntrdStnCloseDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UserEntrdStnCloseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn StationCloseIdColumn {
            get {
                return this.columnStationCloseId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CurrencyDenomIdColumn {
            get {
                return this.columnCurrencyDenomId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CurrencyDescriptionColumn {
            get {
                return this.columnCurrencyDescription;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CountColumn {
            get {
                return this.columnCount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn TotalValueColumn {
            get {
                return this.columnTotalValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CurrencyTypeColumn {
            get {
                return this.columnCurrencyType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CloseDateColumn {
            get {
                return this.columnCloseDate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DefCDStartBalanceColumn {
            get {
                return this.columnDefCDStartBalance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserEntrdStnCloseRow this[int index] {
            get {
                return ((UserEntrdStnCloseRow)(this.Rows[index]));
            }
        }
        
        public event UserEntrdStnCloseRowChangeEventHandler UserEntrdStnCloseRowChanging;
        
        public event UserEntrdStnCloseRowChangeEventHandler UserEntrdStnCloseRowChanged;
        
        public event UserEntrdStnCloseRowChangeEventHandler UserEntrdStnCloseRowDeleting;
        
        public event UserEntrdStnCloseRowChangeEventHandler UserEntrdStnCloseRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddUserEntrdStnCloseRow(UserEntrdStnCloseRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserEntrdStnCloseRow AddUserEntrdStnCloseRow(int StationCloseId, int CurrencyDenomId, string CurrencyDescription, int Count, decimal TotalValue, string CurrencyType, System.DateTime CloseDate, decimal DefCDStartBalance) {
            UserEntrdStnCloseRow rowUserEntrdStnCloseRow = ((UserEntrdStnCloseRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    StationCloseId,
                    CurrencyDenomId,
                    CurrencyDescription,
                    Count,
                    TotalValue,
                    CurrencyType,
                    CloseDate,
                    DefCDStartBalance};
            rowUserEntrdStnCloseRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowUserEntrdStnCloseRow);
            return rowUserEntrdStnCloseRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            UserEntrdStnCloseDataTable cln = ((UserEntrdStnCloseDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new UserEntrdStnCloseDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnStationCloseId = base.Columns["StationCloseId"];
            this.columnCurrencyDenomId = base.Columns["CurrencyDenomId"];
            this.columnCurrencyDescription = base.Columns["CurrencyDescription"];
            this.columnCount = base.Columns["Count"];
            this.columnTotalValue = base.Columns["TotalValue"];
            this.columnCurrencyType = base.Columns["CurrencyType"];
            this.columnCloseDate = base.Columns["CloseDate"];
            this.columnDefCDStartBalance = base.Columns["DefCDStartBalance"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnStationCloseId = new global::System.Data.DataColumn("StationCloseId", typeof(int), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnStationCloseId);
            this.columnCurrencyDenomId = new global::System.Data.DataColumn("CurrencyDenomId", typeof(int), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnCurrencyDenomId);
            this.columnCurrencyDescription = new global::System.Data.DataColumn("CurrencyDescription", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnCurrencyDescription);
            this.columnCount = new global::System.Data.DataColumn("Count", typeof(int), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnCount);
            this.columnTotalValue = new global::System.Data.DataColumn("TotalValue", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnTotalValue);
            this.columnCurrencyType = new global::System.Data.DataColumn("CurrencyType", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnCurrencyType);
            this.columnCloseDate = new global::System.Data.DataColumn("CloseDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnCloseDate);
            this.columnDefCDStartBalance = new global::System.Data.DataColumn("DefCDStartBalance", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDefCDStartBalance);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserEntrdStnCloseRow NewUserEntrdStnCloseRow() {
            return ((UserEntrdStnCloseRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new UserEntrdStnCloseRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(UserEntrdStnCloseRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.UserEntrdStnCloseRowChanged != null)) {
                this.UserEntrdStnCloseRowChanged(this, new UserEntrdStnCloseRowChangeEvent(((UserEntrdStnCloseRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.UserEntrdStnCloseRowChanging != null)) {
                this.UserEntrdStnCloseRowChanging(this, new UserEntrdStnCloseRowChangeEvent(((UserEntrdStnCloseRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.UserEntrdStnCloseRowDeleted != null)) {
                this.UserEntrdStnCloseRowDeleted(this, new UserEntrdStnCloseRowChangeEvent(((UserEntrdStnCloseRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.UserEntrdStnCloseRowDeleting != null)) {
                this.UserEntrdStnCloseRowDeleting(this, new UserEntrdStnCloseRowChangeEvent(((UserEntrdStnCloseRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveUserEntrdStnCloseRow(UserEntrdStnCloseRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            dsUserEntrdStnClose ds = new dsUserEntrdStnClose();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "UserEntrdStnCloseDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class UserEntrdStnCloseRow : global::System.Data.DataRow {
        
        private UserEntrdStnCloseDataTable tableUserEntrdStnClose;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal UserEntrdStnCloseRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableUserEntrdStnClose = ((UserEntrdStnCloseDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int StationCloseId {
            get {
                try {
                    return ((int)(this[this.tableUserEntrdStnClose.StationCloseIdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'StationCloseId\' in table \'UserEntrdStnClose\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUserEntrdStnClose.StationCloseIdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int CurrencyDenomId {
            get {
                try {
                    return ((int)(this[this.tableUserEntrdStnClose.CurrencyDenomIdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'CurrencyDenomId\' in table \'UserEntrdStnClose\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUserEntrdStnClose.CurrencyDenomIdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CurrencyDescription {
            get {
                try {
                    return ((string)(this[this.tableUserEntrdStnClose.CurrencyDescriptionColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'CurrencyDescription\' in table \'UserEntrdStnClose\' is DBNull" +
                            ".", e);
                }
            }
            set {
                this[this.tableUserEntrdStnClose.CurrencyDescriptionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Count {
            get {
                try {
                    return ((int)(this[this.tableUserEntrdStnClose.CountColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Count\' in table \'UserEntrdStnClose\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUserEntrdStnClose.CountColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal TotalValue {
            get {
                try {
                    return ((decimal)(this[this.tableUserEntrdStnClose.TotalValueColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'TotalValue\' in table \'UserEntrdStnClose\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUserEntrdStnClose.TotalValueColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CurrencyType {
            get {
                try {
                    return ((string)(this[this.tableUserEntrdStnClose.CurrencyTypeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'CurrencyType\' in table \'UserEntrdStnClose\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUserEntrdStnClose.CurrencyTypeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime CloseDate {
            get {
                try {
                    return ((global::System.DateTime)(this[this.tableUserEntrdStnClose.CloseDateColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'CloseDate\' in table \'UserEntrdStnClose\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUserEntrdStnClose.CloseDateColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal DefCDStartBalance {
            get {
                try {
                    return ((decimal)(this[this.tableUserEntrdStnClose.DefCDStartBalanceColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'DefCDStartBalance\' in table \'UserEntrdStnClose\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUserEntrdStnClose.DefCDStartBalanceColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsStationCloseIdNull() {
            return this.IsNull(this.tableUserEntrdStnClose.StationCloseIdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetStationCloseIdNull() {
            this[this.tableUserEntrdStnClose.StationCloseIdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCurrencyDenomIdNull() {
            return this.IsNull(this.tableUserEntrdStnClose.CurrencyDenomIdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCurrencyDenomIdNull() {
            this[this.tableUserEntrdStnClose.CurrencyDenomIdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCurrencyDescriptionNull() {
            return this.IsNull(this.tableUserEntrdStnClose.CurrencyDescriptionColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCurrencyDescriptionNull() {
            this[this.tableUserEntrdStnClose.CurrencyDescriptionColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCountNull() {
            return this.IsNull(this.tableUserEntrdStnClose.CountColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCountNull() {
            this[this.tableUserEntrdStnClose.CountColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsTotalValueNull() {
            return this.IsNull(this.tableUserEntrdStnClose.TotalValueColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetTotalValueNull() {
            this[this.tableUserEntrdStnClose.TotalValueColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCurrencyTypeNull() {
            return this.IsNull(this.tableUserEntrdStnClose.CurrencyTypeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCurrencyTypeNull() {
            this[this.tableUserEntrdStnClose.CurrencyTypeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCloseDateNull() {
            return this.IsNull(this.tableUserEntrdStnClose.CloseDateColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCloseDateNull() {
            this[this.tableUserEntrdStnClose.CloseDateColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDefCDStartBalanceNull() {
            return this.IsNull(this.tableUserEntrdStnClose.DefCDStartBalanceColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDefCDStartBalanceNull() {
            this[this.tableUserEntrdStnClose.DefCDStartBalanceColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class UserEntrdStnCloseRowChangeEvent : global::System.EventArgs {
        
        private UserEntrdStnCloseRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserEntrdStnCloseRowChangeEvent(UserEntrdStnCloseRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserEntrdStnCloseRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
