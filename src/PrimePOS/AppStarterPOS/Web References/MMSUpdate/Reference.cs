//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace AppStarter.MMSUpdate {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MmsUPdateServiceSoap", Namespace="http://tempuri.org/")]
    public partial class MmsUPdateService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHiddenInstallableProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback InSertLogOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MmsUPdateService() {
            this.Url = global::AppStarter.Properties.Settings.Default.AppStarter_MMSUpdate_MmsUPdateService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetProductListCompletedEventHandler GetProductListCompleted;
        
        /// <remarks/>
        public event GetHiddenInstallableProductListCompletedEventHandler GetHiddenInstallableProductListCompleted;
        
        /// <remarks/>
        public event InSertLogCompletedEventHandler InSertLogCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProductList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetProductList(string sAppName) {
            object[] results = this.Invoke("GetProductList", new object[] {
                        sAppName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductListAsync(string sAppName) {
            this.GetProductListAsync(sAppName, null);
        }
        
        /// <remarks/>
        public void GetProductListAsync(string sAppName, object userState) {
            if ((this.GetProductListOperationCompleted == null)) {
                this.GetProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductListOperationCompleted);
            }
            this.InvokeAsync("GetProductList", new object[] {
                        sAppName}, this.GetProductListOperationCompleted, userState);
        }
        
        private void OnGetProductListOperationCompleted(object arg) {
            if ((this.GetProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductListCompleted(this, new GetProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHiddenInstallableProductList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetHiddenInstallableProductList(string sAppName) {
            object[] results = this.Invoke("GetHiddenInstallableProductList", new object[] {
                        sAppName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetHiddenInstallableProductListAsync(string sAppName) {
            this.GetHiddenInstallableProductListAsync(sAppName, null);
        }
        
        /// <remarks/>
        public void GetHiddenInstallableProductListAsync(string sAppName, object userState) {
            if ((this.GetHiddenInstallableProductListOperationCompleted == null)) {
                this.GetHiddenInstallableProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHiddenInstallableProductListOperationCompleted);
            }
            this.InvokeAsync("GetHiddenInstallableProductList", new object[] {
                        sAppName}, this.GetHiddenInstallableProductListOperationCompleted, userState);
        }
        
        private void OnGetHiddenInstallableProductListOperationCompleted(object arg) {
            if ((this.GetHiddenInstallableProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHiddenInstallableProductListCompleted(this, new GetHiddenInstallableProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InSertLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InSertLog(string AppName, string PharmNo, string AppVersion, System.DateTime CurrentDate, bool Result, string ErrorDesc) {
            object[] results = this.Invoke("InSertLog", new object[] {
                        AppName,
                        PharmNo,
                        AppVersion,
                        CurrentDate,
                        Result,
                        ErrorDesc});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InSertLogAsync(string AppName, string PharmNo, string AppVersion, System.DateTime CurrentDate, bool Result, string ErrorDesc) {
            this.InSertLogAsync(AppName, PharmNo, AppVersion, CurrentDate, Result, ErrorDesc, null);
        }
        
        /// <remarks/>
        public void InSertLogAsync(string AppName, string PharmNo, string AppVersion, System.DateTime CurrentDate, bool Result, string ErrorDesc, object userState) {
            if ((this.InSertLogOperationCompleted == null)) {
                this.InSertLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInSertLogOperationCompleted);
            }
            this.InvokeAsync("InSertLog", new object[] {
                        AppName,
                        PharmNo,
                        AppVersion,
                        CurrentDate,
                        Result,
                        ErrorDesc}, this.InSertLogOperationCompleted, userState);
        }
        
        private void OnInSertLogOperationCompleted(object arg) {
            if ((this.InSertLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InSertLogCompleted(this, new InSertLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetProductListCompletedEventHandler(object sender, GetProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetHiddenInstallableProductListCompletedEventHandler(object sender, GetHiddenInstallableProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHiddenInstallableProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHiddenInstallableProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InSertLogCompletedEventHandler(object sender, InSertLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InSertLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InSertLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591